
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Tidligere gemt arbejdsrum gendannet]

> rm(list=ls())
> library(dplyr)

Vedhæfter pakke: 'dplyr'

De følgende objekter er maskerede fra 'package:stats':

    filter, lag

De følgende objekter er maskerede fra 'package:base':

    intersect, setdiff, setequal, union

> 
> #install.packages("ContourFunctions")
> 
> if(Sys.info()['nodename'] == "C1709161")    # PSP's machine
+ {
+   o_dir = "C:/test/Dream.AgentBased.MacroModel"  
+ }
> if(Sys.info()['nodename'] == "VDI00316")    # Fjernskrivebord
+ {
+   o_dir = "C:/Users/B007566/Documents/Output"  
+ }
> if(Sys.info()['nodename'] == "VDI00382")    # Fjernskrivebord for agentbased projekt
+ {
+   o_dir = "C:/Users/B007566/Documents/Output"  
+ }
> 
> d_report = read.delim(paste0(o_dir,"/file_reports.txt"))
> 
> pdf(paste0(o_dir,"/firm_reports.pdf"))
> 
> 
> d_report = d_report %>% arrange(ID)
> ids=unique(d_report$ID)
> n = length(ids)
> 
> cols=palette()
> 
> #ddd = d_report %>% filter(ID==1345)
> 
> dec = function(x,n=3)
+ {
+   z = 10^n
+   round(z*x)/z
+ }
> 
> par(mfrow=c(3,3))
> 
> for(i in 1:n)
+ {
+   #i=222
+   dr = d_report %>% filter(ID==ids[i])
+   #dr = dr %>% filter(Time>2050)
+   
+   if(nrow(dr)<2)
+     next
+   
+   if(T)
+   {
+     if(dr$Productivity[1] < 1.8)
+       next
+   }
+   
+   if(T)
+   {
+     if(nrow(dr)>12*5)
+     {
+       dr = dr[1:(12*5),]
+     }
+     
+   }
+   
+   mx = max(max(dr$Employment), max(dr$OptimalEmployment))
+   plot(dr$Time, dr$Employment, type="s", ylab="Employment", xlab="Time", main="", col=cols[3], ylim=c(0,1.1*mx))
+   lines(dr$Time, dr$OptimalEmployment, col=cols[4], type="s")
+   abline(v=2050, lty=2)
+   abline(h=0)
+   ContourFunctions::multicolor.title(c("Actual employment ","Optimal employment"), 3:4, cex.main = 0.7)
+   
+   mx = max(max(dr$Production), max(dr$PotensialSales), max(dr$OptimalProduction))
+   plot(dr$Time, dr$Production, type="s", ylab="Production", main="", 
+        xlab="Time", col=cols[1], ylim=c(0,1.1*mx))
+   lines(dr$Time, dr$PotensialSales, col=cols[2], type="s")
+   lines(dr$Time, dr$ExpectedSales, col=cols[3], type="l")
+   lines(dr$Time, dr$OptimalProduction, col=cols[4], type="l")
+   lines(dr$Time, 0.85*dr$OptimalProduction, lty=2, type="l")
+   #lines(dr$Time, dr$ExpectedSales, col=cols[3], type="l")
+   abline(v=2050, lty=2)
+   abline(h=0)
+   ContourFunctions::multicolor.title(c("Production ","Poten. sales ", "Exp. Sales ", "Optim. Produc. "), 1:4, cex.main = 0.7)
+ 
+   mx = max(max(dr$Production), max(dr$OptimalProduction))
+   plot(dr$Time, dr$Production, type="s", ylab="Production", main="", 
+        xlab="Time", col=cols[1], ylim=c(0,1.1*mx))
+   lines(dr$Time, dr$PotensialSales, col=cols[2], type="s")
+   lines(dr$Time, dr$ExpectedSales, col=cols[3], type="l")
+   lines(dr$Time, dr$OptimalProduction, col=cols[4], type="l")
+   lines(dr$Time, 0.85*dr$OptimalProduction, lty=2, type="l")
+   abline(v=2050, lty=2)
+   abline(h=0)
+   ContourFunctions::multicolor.title(c("Production ","Poten. sales ", "Exp. Sales ", "Optim. Produc. "), 1:4, cex.main = 0.7)
+   
+   mx = max(dr$Wage / dr$ExpectedWage[1])
+   mn = min(dr$Wage / dr$ExpectedWage[1])
+   plot(dr$Time, dr$Wage / dr$ExpectedWage[1], type="s", ylab="Wage", 
+        main="", xlab="Time", col=cols[3], ylim=c(0.9*mn, 1.1*mx))   #
+   lines(dr$Time, dr$ExpectedWage / dr$ExpectedWage[1], lty=2)
+ 
+   plot(dr$Time, dr$Vacancies, type="s", ylab="Vacancies", main="", xlab="Time", col=cols[3])
+   abline(v=2050, lty=2)
+   abline(h=0)
+ 
+   mx = max(dr$Price / dr$ExpectedPrice[1])  
+   mn = min(dr$Price / dr$ExpectedPrice[1])
+   plot(dr$Time, dr$Price / dr$ExpectedPrice[1], type="s", ylab="Price", main="", 
+        xlab="Time", col=cols[3], ylim=c(0.9*mn, 1.1*mx)) 
+   lines(dr$Time, dr$ExpectedPrice / dr$ExpectedPrice[1], lty=2)
+   #abline(h=1)
+   #abline(h=0.95, lty=2)
+   #abline(h=1.05, lty=2)
+ 
+   #plot(dr$Time, dr$Sales, type="s")
+   #lines(dr$Time, dr$ExpectedSales)
+   
+     
+   mx = max(max(dr$Applications), max(dr$Quitters))
+   plot(dr$Time, dr$Applications, type="s", ylim=c(0,mx), xlab="Time", ylab="", main="", col=cols[3])
+   lines(dr$Time, dr$Quitters, type="s", col=cols[4])
+   abline(h=0)
+   abline(v=2050, lty=2)
+   ContourFunctions::multicolor.title(c("Applications ","Quitters"), 3:4, cex.main = 0.7)
+   
+   if(sum(is.nan(dr$Profit / dr$Price))==0)
+   {
+     plot(dr$Time, dr$Profit / dr$Price, type="s", ylab="Profit / Price", xlab="Time", 
+          main="", cex.main=0.9, col=cols[3])
+     abline(h=0)
+     abline(v=2050, lty=2)
+   }
+   else
+   {
+     plot(0)
+   }
+ 
+   plot.new()
+ 
+   d = 0.15
+   text(0,1-d*0, "Date:", adj=0, cex=0.8)  
+   text(0,1-d*1, "ID:", adj=0, cex=0.8)  
+   text(0,1-d*2, "Productivity:", adj=0, cex=0.8)  
+   text(0,1-d*3, "Start time:", adj=0, cex=0.8)  
+   text(0,1-d*4, "End time:", adj=0, cex=0.8)  
+   text(0,1-d*5, "Time span:", adj=0, cex=0.8)  
+   
+   text(0.5,1-d*0, date(), adj=0, cex=0.8)  
+   text(0.5,1-d*1, ids[i], adj=0, cex=0.8)  
+   text(0.5,1-d*2, dec(dr$Productivity[2], 2), adj=0, cex=0.8)  
+   text(0.5,1-d*3, dec(dr$Time[1], 1), adj=0, cex=0.8)  
+   text(0.5,1-d*4, dec(dr$Time[nrow(dr)], 1), adj=0, cex=0.8)  
+   text(0.5,1-d*5, dec(dr$Time[nrow(dr)]-dr$Time[1], 1), adj=0, cex=0.8)  
+ 
+ }
> 
> 
> 
> dev.off()
null device 
          1 
> 
> proc.time()
  bruger   system forløbet 
   12.28     1.12    14.39 

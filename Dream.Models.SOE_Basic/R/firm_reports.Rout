
R version 4.2.3 (2023-03-15 ucrt) -- "Shortstop Beagle"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Tidligere gemt arbejdsrum gendannet]

> rm(list=ls())
> library(dplyr)

Vedhæfter pakke: 'dplyr'

De følgende objekter er maskerede fra 'package:stats':

    filter, lag

De følgende objekter er maskerede fra 'package:base':

    intersect, setdiff, setequal, union

> 
> #install.packages("ContourFunctions")
> 
> if(Sys.info()['nodename'] == "C1709161")    # PSP's machine
+ {
+   o_dir = "C:/test/Dream.AgentBased.MacroModel"  
+ }
> if(Sys.info()['nodename'] == "VDI00316")    # Fjernskrivebord
+ {
+   o_dir = "C:/Users/B007566/Documents/Output"  
+ }
> if(Sys.info()['nodename'] == "VDI00382")    # Fjernskrivebord for agentbased projekt
+ {
+   #o_dir = "C:/Users/B007566/Documents/Output" 
+   o_dir = "H:/AgentBased/SOE/Output"
+   
+ }
> if(Sys.info()['nodename'] == "C2210098")     # Peters nye maskine
+ {
+   o_dir = "C:/Users/B007566/Documents/Output"
+ }
> 
> 
> 
> d_report = read.delim(paste0(o_dir,"/file_reports.txt"))
> 
> 
> #ID=34151
> d_report = d_report %>% arrange(ID)
> ids=unique(d_report$ID)
> n = length(ids)
> 
> cols=palette()
> 
> #ddd = d_report %>% filter(ID==1345)
> 
> dec = function(x,n=3)
+ {
+   z = 10^n
+   round(z*x)/z
+ }
> 
> d_report$Time_f = as.factor(d_report$Time)
> d_tot = d_report %>% group_by(Time_f) %>% summarise(Employment=sum(Employment, na.rm = T)) %>%
+   mutate(Time=as.numeric(as.character(Time_f)))
> 
> pdf(paste0(o_dir,"/firm_reports.pdf"))
> par(mfrow=c(3,3))
> 
> 
> for(i in 1:n)
+ {
+   #i=334
+   #i=i+1
+   #i=which(ids==47844)
+   dr = d_report %>% filter(ID==ids[i])
+ 
+   if(nrow(dr)<12*5)
+     next
+   
+   if(T)
+   {
+     if(dr$Productivity[1] < 1.8)
+       next
+   }
+   
+   if(F)
+   {
+     if(nrow(dr)>12*10)
+     {
+       dr = dr[1:(12*10),]
+     }
+     
+   }
+   
+   if(sum(dr$Profit / dr$Price>0)==0)
+     next
+   
+   cat(i, "/", n, "\n")
+   
+   #d_tot1 = d_tot %>% filter(Time>min(dr$Time), Time<max(dr$Time))
+   
+   #mx_tot = max(d_tot1$Employment)
+   mx = max(max(dr$Employment), max(dr$OptimalEmployment))
+   plot(dr$Time, dr$Employment, type="s", ylab="Employment", xlab="Time", main="", col=cols[1], ylim=c(0,1.1*mx))
+   #lines(d_tot1$Time, 0.3*mx*d_tot1$Employment/mx_tot, col="gray")
+   lines(dr$Time, dr$OptimalEmployment, col=cols[2], type="s")
+   lines(dr$Time, dr$ExpectedEmployment, col=cols[3], type="s")
+   abline(v=2050, lty=2)
+   abline(h=0)
+   ContourFunctions::multicolor.title(c("Actual employment ","Optimal employment", " Expected employment"), 1:3, cex.main = 0.7)
+ 
+   mx = max(max(dr$ExpectedPotentialSales), max(dr$PotensialSales))
+   plot(dr$Time, dr$PotensialSales, type="s", ylab="Optimal Production", main="", 
+        xlab="Time", col=cols[1], ylim=c(0,1.1*mx))
+   lines(dr$Time, dr$OptimalProduction, col=cols[2], type="l")
+   lines(dr$Time, dr$ExpectedPotentialSales, col=cols[3], type="l")
+   abline(h=0)
+   ContourFunctions::multicolor.title(c("Potensial sales "," Optimal production", " Expected potensial sales"), 1:3, cex.main = 0.7)
+   
+ 
+   mx = max(max(dr$Applications), max(dr$Quitters))
+   plot(dr$Time, dr$Applications, type="s", ylim=c(0,mx), xlab="Time", ylab="", main="", col=cols[1])
+   lines(dr$Time, dr$expApplications, lty=1, col=cols[2])
+   lines(dr$Time, dr$expQuitters, type="l", col=cols[3])
+   #lines(dr$Time, dr$expQuitters, lty=2, col=cols[4])
+   abline(h=0)
+   abline(v=2050, lty=2)
+   ContourFunctions::multicolor.title(c("Applications ","ExpApplications ", "Quitters"), 1:3, cex.main = 0.7)
+ 
+   if(F)
+   {
+     gg = (last(dr$ExpectedWage)/first(dr$ExpectedWage))^(1/(12*(last(dr$Time)-first(dr$Time))))-1
+     corr = (1+gg)^(0:(12*(last(dr$Time)-first(dr$Time)))-1)
+     mx = max(dr$Wage / dr$ExpectedWage[1]/corr)
+     mn = min(dr$Wage / dr$ExpectedWage[1]/corr)
+     plot(dr$Time, dr$Wage / dr$ExpectedWage[1] / corr, type="s", ylab="Wage", 
+          main="", xlab="Time", col=cols[3], ylim=c(0.8*mn, 1.2*mx))   #
+     lines(dr$Time, dr$ExpectedWage / dr$ExpectedWage[1] / corr, lty=1)
+     
+     gg = (last(dr$ExpectedPrice)/first(dr$ExpectedPrice))^(1/(12*(last(dr$Time)-first(dr$Time))))-1
+     corr = (1+gg)^(0:(12*(last(dr$Time)-first(dr$Time)))-1)
+     mx = max(dr$Price / dr$ExpectedPrice[1]/corr)  
+     mn = min(dr$Price / dr$ExpectedPrice[1]/corr)
+     plot(dr$Time, dr$Price / dr$ExpectedPrice[1]/corr, type="s", ylab="Price", main="", 
+          xlab="Time", col=cols[3], ylim=c(0.8*mn, 1.2*mx)) 
+     lines(dr$Time, dr$ExpectedPrice / dr$ExpectedPrice[1]/corr, lty=1)
+     
+   }
+   
+   t = dr$Time[-1]
+   x = dr$Wage[-1]
+   xx = dr$ExpectedWage[-nrow(dr)]
+   plot(t,  x / xx, type="l", main="Relative Wage", ylab="Relative", col=cols[3])
+   abline(h=1)
+ 
+   t = dr$Time[-1]
+   x = dr$Price[-1]
+   xx = dr$ExpectedPrice[-nrow(dr)]
+   plot(t,  x / xx, type="l", main="Relative Price", ylab="Relative", col=cols[3])
+   abline(h=1)
+     
+   plot(dr$Time, dr$Vacancies, type="s", ylab="Vacancies", main="", xlab="Time", col=cols[3])
+   abline(v=2050, lty=2)
+   abline(h=0)
+ 
+   if(sum(is.nan(dr$Profit / dr$Price))==0)
+   {
+     plot(dr$Time, dr$Profit / dr$Price, type="s", ylab="Profit / Price", xlab="Time", 
+          main="", cex.main=0.9, col=cols[3])
+     abline(h=0)
+     abline(v=2050, lty=2)
+   }
+   else
+   {
+     plot(0)
+   }
+ 
+   #mx = max(dr$MarketPrice / dr$ExpectedPrice[1])  
+   #mn = min(dr$MarketPrice / dr$ExpectedPrice[1])
+   #plot(dr$Time, dr$MarketPrice / dr$ExpectedPrice[1], type="l", ylab="Price", main="", 
+   #     xlab="Time", col=cols[3], ylim=c(0.9*mn, 1.1*mx)) 
+   #lines(dr$Time, dr$ExpectedPrice / dr$ExpectedPrice[1], lty=2)
+   
+   
+   mx = max(max(dr$Production), max(dr$PotensialSales), max(dr$OptimalProduction))
+   plot(dr$Time, dr$Production, type="s", ylab="Production", main="", 
+        xlab="Time", col=cols[1], ylim=c(0,1.1*mx))
+   lines(dr$Time, dr$PotensialSales, col=cols[2], type="s")
+   lines(dr$Time, dr$ExpectedSales, col=cols[3], type="l")
+   lines(dr$Time, dr$OptimalProduction, col=cols[4], type="l")
+   lines(dr$Time, dr$Production, col=cols[1], type="l")
+   #lines(dr$Time, 0.85*dr$OptimalProduction, lty=2, type="l")
+   #lines(dr$Time, dr$ExpectedSales, col=cols[3], type="l")
+   #abline(v=2050, lty=2)
+   abline(h=0)
+   ContourFunctions::multicolor.title(c("Production ","Poten. sales ", "Exp. Sales ", "Optim. Produc. "), 1:4, cex.main = 0.7)
+   
+   
+   #plot(0)
+   
+   
+   plot.new()
+ 
+   d = 0.15
+   text(0,1-d*0, "Date:", adj=0, cex=0.8)  
+   text(0,1-d*1, "ID:", adj=0, cex=0.8)  
+   text(0,1-d*2, "Productivity:", adj=0, cex=0.8)  
+   text(0,1-d*3, "Start time:", adj=0, cex=0.8)  
+   text(0,1-d*4, "End time:", adj=0, cex=0.8)  
+   text(0,1-d*5, "Time span:", adj=0, cex=0.8)  
+   
+   text(0.5,1-d*0, date(), adj=0, cex=0.8)  
+   text(0.5,1-d*1, ids[i], adj=0, cex=0.8)  
+   text(0.5,1-d*2, dec(dr$Productivity[2], 2), adj=0, cex=0.8)  
+   text(0.5,1-d*3, dec(dr$Time[1], 1), adj=0, cex=0.8)  
+   text(0.5,1-d*4, dec(dr$Time[nrow(dr)], 1), adj=0, cex=0.8)  
+   text(0.5,1-d*5, dec(dr$Time[nrow(dr)]-dr$Time[1], 1), adj=0, cex=0.8)  
+ 
+ }
2 / 4867 
6 / 4867 
14 / 4867 
18 / 4867 
21 / 4867 
28 / 4867 
30 / 4867 
75 / 4867 
94 / 4867 
134 / 4867 
188 / 4867 
191 / 4867 
198 / 4867 
210 / 4867 
263 / 4867 
273 / 4867 
291 / 4867 
352 / 4867 
368 / 4867 
383 / 4867 
402 / 4867 
432 / 4867 
555 / 4867 
573 / 4867 
640 / 4867 
641 / 4867 
675 / 4867 
733 / 4867 
760 / 4867 
850 / 4867 
863 / 4867 
962 / 4867 
972 / 4867 
1013 / 4867 
1090 / 4867 
1157 / 4867 
1330 / 4867 
1390 / 4867 
1422 / 4867 
1475 / 4867 
1476 / 4867 
1632 / 4867 
1650 / 4867 
1666 / 4867 
1678 / 4867 
1780 / 4867 
1875 / 4867 
1920 / 4867 
2073 / 4867 
2134 / 4867 
2296 / 4867 
2358 / 4867 
2371 / 4867 
2375 / 4867 
2448 / 4867 
2487 / 4867 
2494 / 4867 
2497 / 4867 
2515 / 4867 
2554 / 4867 
2570 / 4867 
2578 / 4867 
2579 / 4867 
2803 / 4867 
2808 / 4867 
2813 / 4867 
2814 / 4867 
2938 / 4867 
3172 / 4867 
3193 / 4867 
3249 / 4867 
3283 / 4867 
3337 / 4867 
3350 / 4867 
3536 / 4867 
3660 / 4867 
3694 / 4867 
3708 / 4867 
3807 / 4867 
3870 / 4867 
3949 / 4867 
3985 / 4867 
4005 / 4867 
4020 / 4867 
4040 / 4867 
4048 / 4867 
4111 / 4867 
4322 / 4867 
4394 / 4867 
4482 / 4867 
4577 / 4867 
4604 / 4867 
> 
> 
> 
> dev.off()
null device 
          1 
> 
> proc.time()
  bruger   system forløbet 
   21.87     1.50    26.64 
